---

- name: Register python3 version
  shell: python3 --version 2>&1 | cut -d ' ' -f2
  register: python_version_output
  ignore_errors: yes
  tags:
    - build

- name: Set python_version fact
  set_fact:
    python_version: "{{ python_version_output.stdout }}"

- name: Python3 version print
  debug:
    msg: "{{ python_version }}"

- name: Register python2 version
  shell: python --version 2>&1 | cut -d ' ' -f2
  register: python_version_output
  ignore_errors: yes
  when: not((python_version is undefined) or (python_version is none) or (python_version | trim == ''))
  tags:
    - build

- name: Ensure Pip is installed.
  package:
    name: "{{ 'python3-pip' if (python_version | version_compare(3.0, '>=')) else 'python-pip' }}"
    state: present
  tags:
    - build

- name: Register pip2 version
  command: which pip
  register: pip_executable_output
  ignore_errors: yes
  tags:
    - build

- name: Set pip_executable fact
  set_fact:
    pip_executable: "{{ pip_executable_output.stdout }}"

- name: Pip2 version print
  debug:
    msg: "{{ pip_executable }}"

- name: Register pip3 version
  command: which pip3
  register: pip_executable_output
  ignore_errors: yes
  tags:
    - build

- name: Set pip_executable fact
  set_fact:
    pip_executable: "{{ pip_executable_output.stdout }}"

- name: Pip3 version print
  debug:
    msg: "{{ pip_executable }}"

- name: Ensure pip_packages
  pip:
    executable: "{{ pip_executable }}"
    name: "{{ item.name | default(item) }}"
    state: "{{ item.state | default(omit) }}"
    version: "{{ item.version | default(omit) }}"
  with_items: "{{ pip_packages }}"
  tags:
    - configure
